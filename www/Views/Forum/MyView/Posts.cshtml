@using System.Globalization
@using System.Text
@using System.Web.Hosting
@using System.Web.Mvc.Html
@using LangResources.Utility
@using Snitz.Base
@using SnitzConfig
@using SnitzCore.Extensions
@using SnitzDataModel.Extensions
@using SnitzDataModel.Models
@using Sparc.TagCloud
@using WWW.Controllers
@using WWW.Views.Helpers
@using Topic = SnitzDataModel.Models.Topic


@model WWW.ViewModels.MyTopicsViewModel

@section pageMeta
{
    @*<meta name="description" content="@BbCodeProcessor.StripTags(Model.Forum.Description).TruncateLongString(360)">*@
    <meta name="author" content="@(Config.ForumTitle ?? ClassicConfig.ForumTitle)">
}
@section styles
{
    @Html.Raw(Config.ThemeCss("star-rating.min.css"))
    @Html.Raw(Config.ThemeCss("tag_cloud.css"))
}

@section breadcrumb
{
    @Html.BuildBreadcrumbNavigation()

}

@section sidebox
{
    <div class="panel-group">
        <div class="side-box">
            @Html.Raw(ShowTagCloud(-1))
        </div>
        <div class="side-box">
            @{ Html.RenderPartial("_MyViewList"); }
        </div>
    </div>

}


<div id="topic-panel">
    <div id="docsContainer">

        @foreach (Topic topic in Model.Topics)
        {
            @Html.DisplayFor(m => topic, "MyView")
        }

    </div>

    <div id="progress" class="align-center" style="display: none;">
        <i class="fa fa-3x fa-spinner"></i>
    </div>

</div>

@section scripts
{
    @Scripts.Render("~/Scripts/star-rating.min.js")
    <script type="text/javascript">
        /*
                This is not necessary, but gives the tag-cloud a nice fade-in effect.
        */
        var page = 2;

        $(document).ready(function onPageLoad() {
            var animatedProperties = {
                paddingLeft: '30px',
                paddingTop: '40px',
                paddingBottom: '55px',
                paddingRight: '45px',
                opacity: 1
            };

            $('.tag-cloud').animate(animatedProperties, 500);
        });
        $(document).ready(function() {
            $(document.body).on('touchmove', loadTopics);
            $(window).bind('scroll', loadTopics);
            
        });
        var loadTopics = function() {
            //console.log('loadTopics');
            //console.log($(window).scrollTop() + $(window).height());
            //console.log('doc height:' + $(document).height());
            if ($(window).scrollTop() + window.innerHeight >= document.body.scrollHeight - 40) {
                $(window).unbind('scroll');
                //console.log("page: " + page);
                GetMyTopics();
            }
        };

        $("#docsContainer ul .fa").removeClass("fa-2x");

        function GetMyTopics() {
            $.ajax({
                type: 'GET',
                url: window.SnitzVars.baseUrl + 'Forum/MyViewNext/' + page + '/?nextpage=' + page + '&refresh=YES',
                success: function(data) {
                    if (data != null) {
                        $("#docsContainer").append(data);
                        page++;
                        $("#docsContainer ul .fa").removeClass("fa-2x");
                    }
                },
                beforeSend: function() {
                    $("#progress").show();
                },
                complete: function() {
                    $("#progress").hide();
                    $(window).bind('scroll', loadTopics);
                    $("time.timeago").timeago();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    alert("Error while retrieving data! " + errorThrown);
                }
            });
        }
    </script>
}

@functions
{

    public string ShowTagCloud(int id)
    {
        TagCloudSetting setting = new TagCloudSetting
        {
            NumCategories = 20, MaxCloudSize = 50, StopWords = LoadStopWords()
        };

        var phrases = id == -1 ? Forum.GetTagStrings(User.ForumSubscriptions()) : Forum.GetTagStrings(id);
        var tagfree = new List<string>();

        foreach (var phrase in phrases)
        {
            string newphrase = BbCodeFormatter.BbCodeProcessor.CleanCode(phrase);
            newphrase = BbCodeFormatter.BbCodeProcessor.StripCodeContents(newphrase);
            newphrase = BbCodeFormatter.BbCodeProcessor.StripTags(newphrase);
            newphrase = BbCodeFormatter.BbCodeProcessor.RemoveHtmlTags(newphrase);
            tagfree.Add(newphrase);

        }
        var model = new TagCloudAnalyzer(setting)
            .ComputeTagCloud(tagfree)
            .Shuffle();

        return RenderRazorViewToString("~/Views/Shared/_TagCloud.cshtml", model); //PartialView("_TagCloud",model);
    }
    
    public string RenderRazorViewToString(string viewName, object model)
    {

        var st = new StringWriter();
        var context = new HttpContextWrapper(HttpContext.Current);
        var routeData = new RouteData();
        var controllerContext = new ControllerContext(new RequestContext(context, routeData), new TagCloudController());
        var razor = new RazorView(controllerContext, viewName, null, false, null);
        razor.Render(new ViewContext(controllerContext, razor, new ViewDataDictionary(model), new TempDataDictionary(), st), st);
        return st.ToString();
    }

    public static  HashSet<string> LoadStopWords()
    {
        var culture = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
        if (culture == "nn" || culture == "nb")
        {
            culture = "no";
        }
        var path = HostingEnvironment.MapPath("~/App_Data/stopwords-" + culture + ".txt");
        string logFile = "";
        if (System.IO.File.Exists(path))
        {
            logFile = System.IO.File.ReadAllText(path);
                
        }

        var wordList = logFile.Split(new string[] { Environment.NewLine, "\n", "\r" }, StringSplitOptions.RemoveEmptyEntries);
        return new HashSet<string>(wordList, StringComparer.OrdinalIgnoreCase);
    }
}